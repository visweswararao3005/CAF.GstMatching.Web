@{
    var responseDict = ViewBag.ResponseDict as Dictionary<string, string> ?? new Dictionary<string, string>();
    var message = ViewBag.Message as string ?? "null";
    //var storedPassword = ViewBag.storedPassword as string;
}
@{
    <link rel="stylesheet" href="~/css/ChangePasswordV.css" />
}

<div class="container">
    <h2>@(responseDict.ContainsKey("lblChangePassword") ? responseDict["lblChangePassword"] : "Change Password")</h2>

    <form id="changePasswordForm" asp-action="ChangePasswordV" method="post" onsubmit="return validateForm()">
       @* <input type="hidden" id="storedPassword" value="@storedPassword" /> *@

        <div class="form-group">
            <label for="currentPassword">@(responseDict.ContainsKey("lblCurrentPassword") ? responseDict["lblCurrentPassword"] : "Current Password")</label>
            <div class="input-group">
                <input type="password" id="currentPassword" name="currentPassword" class="form-control" required />
                <div class="input-group-append">
                    <span class="input-group-text" onclick="togglePassword('currentPassword', this)">
                        <i class="fa fa-eye"></i>
                    </span>
                </div>
            </div>
            <div id="currentPasswordError" class="text-danger"></div>
        </div>
        <div class="form-group">
            <label for="newPassword">@(responseDict.ContainsKey("lblNewPassword") ? responseDict["lblNewPassword"] : "New Password")</label>
            <div class="input-group">
                <input type="password" id="newPassword" name="newPassword" class="form-control" required />
                <div class="input-group-append">
                    <span class="input-group-text" onclick="togglePassword('newPassword', this)">
                        <i class="fa fa-eye"></i>
                    </span>
                </div>
            </div>
            <small class="text-muted">Password must be at least 8 characters, contain 1 uppercase letter, and 1 number.</small>
            <div id="passwordError" class="text-danger"></div>
        </div>
        <div class="form-group">
            <label for="confirmPassword">@(responseDict.ContainsKey("lblConfirmPassword") ? responseDict["lblConfirmPassword"] : "Confirm New Password")</label>
            <div class="input-group">
                <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required />
                <div class="input-group-append">
                    <span class="input-group-text" onclick="togglePassword('confirmPassword', this)">
                        <i class="fa fa-eye"></i>
                    </span>
                </div>
            </div>
            <div id="confirmPasswordError" class="text-danger"></div>
        </div>
        <button type="submit" class="btn btn-primary">@(responseDict.ContainsKey("btnChangePassword") ? responseDict["btnChangePassword"] : "Change Password")</button>
        <button type="reset" class="btn btn-secondary" onclick="clearForm()">@(responseDict.ContainsKey("btnCancel") ? responseDict["btnCancel"] : "Cancel")</button>
    </form>

    @{
        var isSuccess = message?.Contains("successfully", StringComparison.OrdinalIgnoreCase) ?? false;
    }
    <div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-@(isSuccess ? "success" : "danger") text-white">
                    <h5 class="modal-title" id="messageModalLabel">Notification</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @message
                </div>
                <div class="modal-footer">
                    @if (isSuccess)
                    {
                        <button type="button" class="btn btn-success" id="successRedirectBtn">OK</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
                    }
                </div>
            </div>
        </div>
    </div>


</div>

<script>
    // Store form values in localStorage on form submission
    document.getElementById("changePasswordForm").addEventListener("submit", function() {
        localStorage.setItem("currentPassword", document.getElementById("currentPassword").value);
        localStorage.setItem("newPassword", document.getElementById("newPassword").value);
        localStorage.setItem("confirmPassword", document.getElementById("confirmPassword").value);
    });

    // Restore form values or clear them based on the message
    document.addEventListener("DOMContentLoaded", function () {
        var message = "@message";
        var form = document.getElementById("changePasswordForm");

        if (message != "null") {
            var myModal = new bootstrap.Modal(document.getElementById('messageModal'), {
                backdrop: 'static',
                keyboard: false
            });
            myModal.show();

            if (message.toLowerCase().includes("successfully")) {
                // Clear form and localStorage on success
                form.reset();
                localStorage.removeItem("currentPassword");
                localStorage.removeItem("newPassword");
                localStorage.removeItem("confirmPassword");
                // ✅ Redirect when success OK button is clicked
                var successBtn = document.getElementById("successRedirectBtn");
                if (successBtn) {
                    successBtn.addEventListener("click", function () {
                        window.location.href='@Url.Action("DashboardView", "Vendor")';
                    });
                }
            } else {
                // Restore form values on error
                document.getElementById("currentPassword").value = localStorage.getItem("currentPassword") || "";
                document.getElementById("newPassword").value = localStorage.getItem("newPassword") || "";
                document.getElementById("confirmPassword").value = localStorage.getItem("confirmPassword") || "";
            }
        }
    });

    function togglePassword(fieldId, element) {
        var input = document.getElementById(fieldId);
        var icon = element.querySelector("i");

        if (input.type === "password") {
            input.type = "text";
            icon.classList.remove("fa-eye");
            icon.classList.add("fa-eye-slash");
        } else {
            input.type = "password";
            icon.classList.remove("fa-eye-slash");
            icon.classList.add("fa-eye");
        }
    }

    function validateForm() {
        var currentPassword = document.getElementById("currentPassword").value;
        var newPassword = document.getElementById("newPassword").value;
        var confirmPassword = document.getElementById("confirmPassword").value;
        //var storedPassword = document.getElementById("storedPassword").value;
        var passwordError = document.getElementById("passwordError");
        var confirmPasswordError = document.getElementById("confirmPasswordError");
        var currentPasswordError = document.getElementById("currentPasswordError");

        // Reset error messages
        passwordError.textContent = "";
        confirmPasswordError.textContent = "";
        currentPasswordError.textContent = "";

        // Password regex (at least 8 characters, 1 uppercase, 1 number)
        var passwordRegex = /^(?=.*[A-Z])(?=.*\d).{8,}$/;

        // Validation 1: Check password strength
        if (!passwordRegex.test(newPassword)) {
            passwordError.textContent = "Password must have at least 8 characters, 1 uppercase letter, and 1 number.";
            return false;
        }

        // Validation 2: Check if new password and confirm password match
        if (newPassword !== confirmPassword) {
            confirmPasswordError.textContent = "Passwords do not match!";
            return false;
        }

        // Validation 3: Check if current password is correct (simulated)
        // if (currentPassword !== storedPassword) {
        //     currentPasswordError.textContent = "Current Password is incorrect.";
        //     return false;
        // }

        // Validation 4: Check if new password is different from current password
        if (currentPassword === newPassword) {
            passwordError.textContent = "Current Password and New Password can't be the same.";
            return false;
        }

        return true;
    }

    function clearForm() {
        var form = document.getElementById("changePasswordForm");
        form.reset();
        // Clear localStorage
        localStorage.removeItem("currentPassword");
        localStorage.removeItem("newPassword");
        localStorage.removeItem("confirmPassword");
        // Clear error messages
        document.getElementById("passwordError").textContent = "";
        document.getElementById("confirmPasswordError").textContent = "";
        document.getElementById("currentPasswordError").textContent = "";
    }
</script>

<!-- FontAwesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">